# file: roles/nodeansible/tasks/asserts.yml
# author: Antoni PÃ mies <toni@arboli.net>
#
---
#
# Test if create_ansible_user is defined and has a correct value
#
- name: CHECK VAR | Checks if create_ansible_user is defined and has a correct value
  assert:
    that:
      - create_ansible_user is defined
      - create_ansible_user | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'create_ansible_user' must be defined and

      must be a boolean variable
#
# Test if validate_password_strength is defined and has a correct value
#
- name: CHECK VAR | Checks if validate_password_strength is defined and has a correct value
  assert:
    that:
      - validate_password_strength is defined
      - validate_password_strength | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'validate_password_strength' must be defined and

      must be a boolean variable
#
# Checks if ansible user's vars are set correctly
#
- name: CHECK VAR | Checks if ansible user's vars are set correctly
  block:
    #
    # Checks if custom_ansible_group is set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_group is set correctly
      assert:
        that:
          - custom_ansible_group | type_debug == 'dict'
        quiet: yes
      when:
        - custom_ansible_group is defined
    #
    # Checks if item custom_ansible_group.name is set correctly
    #
    - name: CHECK VAR | Checks if item custom_ansible_group.name is set correctly
      assert:
        that:
          - custom_ansible_group.name is string
          - custom_ansible_group.name | length > 0
        quiet: yes
        fail_msg: >
          When 'create_ansible_user' is true, the item

          'custom_ansible_group.name' must not be empty and should be

          a string.
      when:
        - custom_ansible_group is defined
    #
    # Checks if item custom_ansible_group.gid is set correctly
    #
    - name: CHECK VAR | Checks if item custom_ansible_group.gid is set correctly
      assert:
        that:
          - custom_ansible_group.gid is defined
          - custom_ansible_group.gid is number
        quiet: yes
        fail_msg: >
          When 'create_ansible_user' is true, the item

          'custom_ansible_group.gid' must not be empty and should be

          a number greather than {{ gid_ansible_user_gt | default( 999 ) | int }}.

          If you want a number equal or less than {{ custom_ansible_group.gid | default( 999 ) | int }} please set

          it into the variable gid_ansible_user_gt in the file

          defaults/main.yml or set it in the playbook.
      when:
        - custom_ansible_group is defined

    - name: CHECK VAR | Checks if item custom_ansible_group.gid is set correctly
      assert:
        that:
          - custom_ansible_group.gid > gid_ansible_user_gt | default( 999 ) | int
          - custom_ansible_group.gid > 0
        quiet: yes
        fail_msg: >
          When 'create_ansible_user' is true, the item

          'custom_ansible_group.gid' must not be empty and should be

          a number greather than {{ gid_ansible_user_gt | default( 999 ) | int }} and never less than 1

          If you want a number equal or less than {{ custom_ansible_group.gid | default( 999 ) | int }} please set

          the variable gid_ansible_user_gt to {{ custom_ansible_group.gid | default( 999 ) | int - 1 }} in the

          file defaults/main.yml or set it in the playbook.
      when:
        - custom_ansible_group is defined
    #
    # Checks if custom_ansible_user is set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user is set correctly
      assert:
        that:
          - custom_ansible_user is defined
          - custom_ansible_user | type_debug == 'dict'
        quiet: yes
    #
    # Checks if item custom_ansible_user.name is set correctly
    #
    - name: CHECK VAR | Checks if item custom_ansible_user.name is set correctly
      assert:
        that:
          - custom_ansible_user.name is string
          - custom_ansible_user.name | length > 0
        quiet: yes
        fail_msg: >
          When 'create_ansible_user' is true, the item

          'custom_ansible_user.name' must not be empty and should be

          a string.
    #
    # Checks if item custom_ansible_user.uid is set correctly
    #
    - name: CHECK VAR | Checks if item custom_ansible_user.uid is set correctly
      assert:
        that:
          - custom_ansible_user.uid is number
        quiet: yes
        fail_msg: >
          When 'create_ansible_user' is true, the item

          'custom_ansible_user.uid' must not be empty and should be

          a number greather than {{ uid_ansible_user_gt | default( 999 ) | int }}.

          If you want a number equal or less than {{ uid_ansible_user_gt | default( 999 ) | int }} please set

          it into the variable uid_ansible_user_gt in the file

          defaults/main.yml or set it in the playbook.
      when:
        - custom_ansible_user.uid is defined

    - name: CHECK VAR | Checks if item custom_ansible_user.uid is set correctly
      assert:
        that:
          - custom_ansible_user.uid > uid_ansible_user_gt | default( 999 ) | int
          - custom_ansible_user.uid > 0
        quiet: yes
        fail_msg: >
          When 'create_ansible_user' is true, the item

          'custom_ansible_user.uid' must not be empty and should be

          a number greather than {{ uid_ansible_user_gt | default( 999 ) | int }} and never less than 1

          If you want a number equal or less than {{ custom_ansible_user.uid | default( 999 ) | int }} please set

          the variable uid_ansible_user_gt to {{ custom_ansible_user.uid | default( 999 ) | int - 1 }} in the

          file defaults/main.yml or set it in the playbook.
      when:
        - custom_ansible_user.uid is defined
    #
    # Test if custom_ansible_user.shell is set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.shell is set correctly
      assert:
        that:
          - custom_ansible_user.shell is string
          - custom_ansible_user.shell | length > 0
        quiet: yes
        fail_msg: >
          The item custom_ansible_user.shell must be a string
      when:
        - custom_ansible_user.shell is defined
    #
    # Test if custom_ansible_user.comment is set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.comment is set correctly
      assert:
        that:
          - custom_ansible_user.comment is string
          - custom_ansible_user.comment | length > 0
        quiet: yes
        fail_msg: >
          The item custom_ansible_user.comment must be a string
      when:
        - custom_ansible_user.comment is defined
    #
    # Test if custom_ansible_user.group is set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.group is set correctly
      assert:
        that:
          - custom_ansible_user.group is string
          - custom_ansible_user.group | length > 0
        quiet: yes
        fail_msg: >
          The item custom_ansible_user.group must be a string
      when:
        - custom_ansible_user.group is defined
    #
    # Test if custom_ansible_user.group is set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.group is set correctly
      assert:
        that:
          - custom_ansible_user.group == custom_ansible_group.name
        quiet: yes
        fail_msg: >
          When you define custom_ansible_group,custom_ansible_user.group

          must be equal to custom_ansible_group.name:

          '{{ custom_ansible_group.name }}' != '{{ custom_ansible_user.group }}'
      when:
        - custom_ansible_user.group is defined
        - custom_ansible_group.name is defined

    #
    # Tests that custom_ansible_user.sudoer has a correct value
    #
    - name: CHECK VAR | Checks that custom_ansible_user.sudoer has a correct value
      assert:
        that:
          - custom_ansible_user.sudoer | type_debug == 'bool'
        quiet: yes
        fail_msg: >
          The item 'custom_ansible_user.sudoer' must be a boolean
      when:
        - custom_ansible_user.sudoer is defined
    #
    # Tests that custom_ansible_user.sudo_nopasswd has a correct value
    #
    - name: CHECK VAR | Checks that custom_ansible_user.sudo_nopasswd has a correct value
      assert:
        that:
          - custom_ansible_user.sudo_nopasswd | type_debug == 'bool'
        quiet: yes
        fail_msg: >
          The item 'custom_ansible_user.sudo_nopasswd' must be a boolean
      when:
        - custom_ansible_user.sudo_nopasswd is defined
    #
    # Test if custom_ansible_user.sufo_file is set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.sudo_file is set correctly
      assert:
        that:
          - custom_ansible_user.sudo_file is string
          - custom_ansible_user.sudo_file | length > 0
        quiet: yes
        fail_msg: >
          The item custom_ansible_user.sudo_file must be a string
      when:
        - custom_ansible_user.sudo_file is defined
    #
    # Test if custom_ansible_user.home is set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.home is set correctly
      assert:
        that:
          - custom_ansible_user.home is defined
          - custom_ansible_user.home is string
          - custom_ansible_user.home | length > 0
        quiet: yes
        fail_msg: >
          The item custom_ansible_user.home must be defined and

          must be a string
    #
    # Test if custom_ansible_user.password or custom_ansible_user._clear_password
    # is set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.password is set correctly
      fail:
        msg: >

          Ansible user password left blank. Please set a secure (encrypted)

          custom password in the variable custom_ansible_user.password or set a

          clear password (not recommended) in custom_ansible_user.clear_password.


          You can generate an encrypted password with:

            - Ansible ad-hoc command

              {% raw %}ansible all -i localhost, -m debug -a "msg={{ 'mypassword' | password_hash('sha512', 'mysecretsalt') }}"{% endraw %}


            - The mkpasswd utility that is available on most Linux systems:

              mkpasswd --method=sha-512

          See: https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module

      when:
        - ( custom_ansible_user.password is not defined and
            custom_ansible_user.clear_password is not defined ) or
          (  custom_ansible_user.password is defined and
             custom_ansible_user.password | length == 0 and
             custom_ansible_user.clear_password is defined and
             custom_ansible_user.clear_password | length == 0 )

    - name: CHECK VAR | Checks if custom_ansible_user.password is set correctly
      fail:
        msg: >
          You can not set the variable custom_ansible_user.password and the

          variable custom_ansible_user.clear_password at the same time.

          The recommended setting is to use the variable custom_ansible_user.password

          with a secure (encrypted) password.


          You can generate an encrypted password with:

            - Ansible ad-hoc command

              {% raw %}ansible all -i localhost, -m debug -a "msg={{ 'mypassword' | password_hash('sha512', 'mysecretsalt') }}"{% endraw %}


            - The mkpasswd utility that is available on most Linux systems:

              mkpasswd --method=sha-512

          See: https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module

      when:
        - custom_ansible_user.password is defined
        - custom_ansible_user.clear_password is defined
        - custom_ansible_user.password | length > 0
        - custom_ansible_user.clear_password | length > 0

    - name: CHECK VAR | Checks if custom_ansible_user.password is set correctly
      fail:
        msg: >
          Invalid clear password, the password must be between 10 and 32

          caracters long and must have at least:

            - 2 uppercase letters
            - 1 special case letter (!@#$&*)
            - 2 digits
            - 3 lowercase letters

      when:
        - validate_password_strength
        - custom_ansible_user.clear_password is defined
        - custom_ansible_user.clear_password | length > 0
        - not custom_ansible_user.clear_password
            | regex_search("^(?=.*[A-Z].*[A-Z])(?=.*[!@#$&*])(?=.*[0-9].*[0-9])(?=.*[a-z].*[a-z].*[a-z]).{10,32}$")
    #
    # Tests that custom_ansible_user.update_password has a correct value
    #
    - name: CHECK VAR | Checks that custom_ansible_user.update_password has a correct value
      assert:
        that:
          - custom_ansible_user.update_password is string
          - custom_ansible_user.update_password in valid_update_password
        quiet: yes
        fail_msg: >
          The item 'custom_ansible_user.update_password' must be one of:

          {{ valid_update_password | to_nice_yaml }}
          got: {{ custom_ansible_user.update_password }}
      vars:
        - valid_update_password:
          - on_create
          - always
      when:
        - custom_ansible_user.update_password is defined
    #
    # Tests that custom_ansible_user.create_ssh_keypair has a correct value
    #
    - name: CHECK VAR | Checks that custom_ansible_user.create_ssh_keypair has a correct value
      assert:
        that:
          - custom_ansible_user.create_ssh_keypair | type_debug == 'bool'
        quiet: yes
        fail_msg: >
          The item 'custom_ansible_user.create_ssh_keypair' must be a boolean
      when:
        - custom_ansible_user.create_ssh_keypair is defined
    #
    # Tests that custom_ansible_user.copy_rsa_keys has a correct value
    #
    - name: CHECK VAR | Checks that custom_ansible_user.copy_rsa_keys has a correct value
      assert:
        that:
          - custom_ansible_user.copy_rsa_keys | type_debug == 'bool'
        quiet: yes
        fail_msg: >
          The item 'custom_ansible_user.copy_rsa_keys' must be a boolean
      when:
        - custom_ansible_user.copy_rsa_keys is defined
    #
    # Tests that custom_ansible_user.copy_rsa_keys has a correct value
    #
    - name: CHECK VAR | Checks that custom_ansible_user.copy_rsa_keys has a correct value
      fail:
        msg: >
          You cannot set 'custom_ansible_user.copy_rsa_keys' and

          'custom_ansible_user.create_ssh_keypair' true at the same time.
      when:
        - custom_ansible_user.copy_rsa_keys is defined
        - custom_ansible_user.create_ssh_keypair is defined
        - custom_ansible_user.copy_rsa_keys
        - custom_ansible_user.create_ssh_keypair
    #
    # Checks if custom_ansible_user.authorized_keys is set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.authorized_keys is set correctly
      assert:
        that:
          - custom_ansible_user.authorized_keys | type_debug == 'list'
        quiet: yes
      when:
        - custom_ansible_user.authorized_keys is defined
    #
    # Checks if custom_ansible_user.authorized_keys.keys are set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.authorized_keys.keys are set correctly
      assert:
        that:
          - item.key is defined
          - item.key is string
          - item.key | length >0
        quiet: yes
      loop: "{{ custom_ansible_user.authorized_keys }}"
      loop_control:
        label: "{% if item.comment is defined %}{{ item.comment }}{% else %}{{ item.key }}{% endif %}"
      when:
        - custom_ansible_user.authorized_keys is defined
        - custom_ansible_user.authorized_keys | length > 0
    #
    # Checks if custom_ansible_user.authorized_keys.from are set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.authorized_keys.from are set correctly
      assert:
        that:
          - item.from | type_debug == 'list'
          - item.from | length >0
        quiet: yes
      loop: "{{ custom_ansible_user.authorized_keys }}"
      loop_control:
        label: "{% if item.comment is defined %}{{ item.comment }}{% else %}{{ item.key }}{% endif %}"
      when:
        - custom_ansible_user.authorized_keys is defined
        - custom_ansible_user.authorized_keys | length > 0
        - item.from is defined
    #
    # Checks if items in custom_ansible_user.authorized_keys.from are set correctly
    #
    - name: CHECK VAR | Checks if items in custom_ansible_user.authorized_keys.from are set correctly
      assert:
        that:
          - item.1 is string
          - item.1 | length >0
        quiet: yes
      loop: "{{ q('subelements', custom_ansible_user.authorized_keys, 'from', {'skip_missing': True}) }}"
      loop_control:
        label: "{% if item.0.comment is defined %}{{ item.0.comment }}{% else %}{{ item.0.key }}{% endif %}"
      when:
        - custom_ansible_user.authorized_keys is defined
        - custom_ansible_user.authorized_keys | length > 0
    #
    # Checks if custom_ansible_user.authorized_keys.comment are set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.authorized_keys.comment are set correctly
      assert:
        that:
          - item.comment is string
          - item.comment | length >0
        quiet: yes
      loop: "{{ custom_ansible_user.authorized_keys }}"
      loop_control:
        label: "{% if item.comment is defined %}{{ item.comment }}{% else %}{{ item.key }}{% endif %}"
      when:
        - custom_ansible_user.authorized_keys is defined
        - custom_ansible_user.authorized_keys | length > 0
        - item.comment is defined
    #
    # Checks if custom_ansible_user.authorized_keys.no_agent_forwarding are set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.authorized_keys.no_agent_forwarding are set correctly
      assert:
        that:
          - item.no_agent_forwarding | type_debug == 'bool'
        quiet: yes
      loop: "{{ custom_ansible_user.authorized_keys }}"
      loop_control:
        label: "{% if item.comment is defined %}{{ item.comment }}{% else %}{{ item.key }}{% endif %}"
      when:
        - custom_ansible_user.authorized_keys is defined
        - custom_ansible_user.authorized_keys | length > 0
        - item.no_agent_forwarding is defined
    #
    # Checks if custom_ansible_user.authorized_keys.no_port_forwarding are set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.authorized_keys.no_port_forwarding are set correctly
      assert:
        that:
          - item.no_port_forwarding | type_debug == 'bool'
        quiet: yes
      loop: "{{ custom_ansible_user.authorized_keys }}"
      loop_control:
        label: "{% if item.comment is defined %}{{ item.comment }}{% else %}{{ item.key }}{% endif %}"
      when:
        - custom_ansible_user.authorized_keys is defined
        - custom_ansible_user.authorized_keys | length > 0
        - item.no_port_forwarding is defined
    #
    # Checks if custom_ansible_user.authorized_keys.no_x11_forwarding are set correctly
    #
    - name: CHECK VAR | Checks if custom_ansible_user.authorized_keys.no_x11_forwarding are set correctly
      assert:
        that:
          - item.no_x11_forwarding | type_debug == 'bool'
        quiet: yes
      loop: "{{ custom_ansible_user.authorized_keys }}"
      loop_control:
        label: "{% if item.comment is defined %}{{ item.comment }}{% else %}{{ item.key }}{% endif %}"
      when:
        - custom_ansible_user.authorized_keys is defined
        - custom_ansible_user.authorized_keys | length > 0
        - item.no_x11_forwarding is defined

  when:
    - create_ansible_user is defined
    - create_ansible_user
#
# Test if ansible_base_packages is set correctly
#
- name: CHECK VAR | Checks if ansible_base_packages is set correctly
  assert:
    that:
      - ansible_base_packages is defined
      - ansible_base_packages | type_debug == 'list'
      - ansible_base_packages | length > 0
    quiet: yes

#
# Test if items in ansible_base_packages are set correctly
#
- name: CHECK VAR | Checks if items in ansible_base_packages are set correctly
  assert:
    that:
      - item is string
      - item | length > 0
    quiet: yes
    fail_msg: >
      The item {{ item }} is not string
  loop: "{{ ansible_base_packages }}"

#
# Checks that cfg_hosts_inventory is a string
#
- name: CHECK VAR | Checks that cfg_hosts_inventory is a string
  assert:
    that:
      - cfg_hosts_inventory is defined
      - cfg_hosts_inventory is string
      - cfg_hosts_inventory | length > 0
    quiet: yes
    fail_msg: >
      The variable 'cfg_hosts_inventory' must be defined and

      must be a string

#
# Test if backup_config_files is defined and has a correct value
#
- name: CHECK VAR | Checks if backup_config_files is defined and has a correct value
  assert:
    that:
      - backup_config_files is defined
      - backup_config_files | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'backup_config_files' must be defined and

      must be a boolean variable
#
# Test if cfg_library is set correctly
#
- name: CHECK VAR | Checks if cfg_library is set correctly
  assert:
    that:
      - cfg_library is defined
      - cfg_library | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_library are set correctly
#
- name: CHECK VAR | Checks if items in cfg_library are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length >0
    quiet: yes
  loop: "{{ cfg_library }}"
#
# Test if module_utils is set correctly
#
- name: CHECK VAR | Checks if cfg_module_utils is set correctly
  assert:
    that:
      - cfg_module_utils is defined
      - cfg_module_utils | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_module_utils are set correctly
#
- name: CHECK VAR | Checks if items in cfg_module_utils are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length >0
    quiet: yes
  loop: "{{ cfg_module_utils }}"
#
# Checks that cfg_gathering is a string and has a correct value
#
- name: CHECK VAR | Checks that cfg_gathering is a string and has a correct value
  assert:
    that:
      - cfg_gathering is defined
      - cfg_gathering is string
      - cfg_gathering in valid_gathering
    quiet: yes
    fail_msg: >
      The variable 'cfg_gathering' must be defined, must be a string

      and must contain one of:

      {{ valid_gathering | to_nice_yaml }}
  vars:
    - valid_gathering:
      - smart
      - implicit
      - explicit
#
# Test if cfg_gather_subset is set correctly
#
- name: CHECK VAR | Checks if cfg_gather_subset is set correctly
  assert:
    that:
      - cfg_gather_subset is defined
      - cfg_gather_subset | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_gather_subset are set correctly
#
- name: CHECK VAR | Checks if items in cfg_gather_subset are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item in valid_gather_subset
    quiet: yes
    fail_msg: >
      The items of 'cfg_gather_subset' must be defined, must be

      a string and must contain one of:

      {{ valid_gather_subset | to_nice_yaml }}
  loop: "{{ cfg_gather_subset }}"
  vars:
    - valid_gather_subset:
      - all
      - network
      - hardware
      - virtual
      - facter
      - ohai
      - '!network'
      - '!hardware'
      - '!virtual'
      - '!facter'
      - '!ohai'
#
# Test if cfg_gather_timeout is set correctly
#
- name: CHECK VAR | Checks if cfg_gather_timeout is set correctly
  assert:
    that:
      - cfg_gather_timeout is defined
      - cfg_gather_timeout is number
    fail_msg: >
      The variable 'cfg_gather_timeout' must be defined and must be a number
    quiet: yes
#
# Test if cfg_inject_facts_as_vars is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_inject_facts_as_vars is defined and has a correct value
  assert:
    that:
      - cfg_inject_facts_as_vars is defined
      - cfg_inject_facts_as_vars | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_inject_facts_as_vars' must be defined

      and must be a boolean variable
#
# Test if cfg_stdout_callback is set correctly
#
- name: CHECK VAR | Checks if cfg_stdout_callback is set correctly
  assert:
    that:
      - cfg_stdout_callback is defined
      - cfg_stdout_callback is string
      - cfg_stdout_callback | length > 0
    quiet: yes
    fail_msg: >
      The variable 'cfg_stdout_callback' must be defined and

      must be a string
#
# Test if cfg_callback_enabled is set correctly
#
- name: CHECK VAR | Checks if cfg_callback_enabled is set correctly
  assert:
    that:
      - cfg_callback_enabled is defined
      - cfg_callback_enabled | type_debug == 'list'
    quiet: yes
  when:
    - cfg_callback_enabled is defined
#
# Test if items in cfg_callback_enabled are set correctly
#
- name: CHECK VAR | Checks if items in cfg_callback_enabled are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
    fail_msg: >
      The items of 'cfg_callback_enabled' must be defined and

      must be a string
  loop: "{{ cfg_callback_enabled }}"
  when:
    - cfg_callback_enabled is defined
#
# Test if cfg_logging is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_logging is defined and has a correct value
  assert:
    that:
      - cfg_logging is defined
      - cfg_logging | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_logging' must be defined and

      must be a boolean variable
#
# Test if cfg_log_path are set correctly
#
- name: CHECK VAR | Checks if cfg_log_path is set correctly
  assert:
    that:
      - cfg_log_path is defined
      - cfg_log_path is string
      - cfg_log_path | length > 0
    quiet: yes
    fail_msg: >
      The variable 'cfg_log_path' must be defined and

      must be a string
  when:
    - cfg_logging is defined
    - cfg_logging
#
# Test if cfg_private_role_vars is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_private_role_vars has a correct value when it's defined
  assert:
    that:
      - cfg_private_role_vars | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_private_role_vars' must be defined and

      must be a boolean variable
  when:
    - cfg_private_role_vars is defined
#
# Test if cfg_vault_password_file are set correctly
#
- name: CHECK VAR | Checks if cfg_vault_password_file is set correctly
  assert:
    that:
      - cfg_vault_password_file is string
      - cfg_vault_password_file | length > 0
    quiet: yes
    fail_msg: >
      The variable 'cfg_vault_password_file' must be a string
  when:
    - cfg_vault_password_file is defined
#
# Test if cfg_ansible_managed are set correctly
#
- name: CHECK VAR | Checks if cfg_ansible_managed is set correctly
  assert:
    that:
      - cfg_ansible_managed is string
      - cfg_ansible_managed | length > 0
    quiet: yes
    fail_msg: >
      The variable 'cfg_ansible_managed' must be a string
  when:
    - cfg_ansible_managed is defined
#
# Test if cfg_display_skipped_hosts is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_display_skipped_hosts is defined and has a correct value
  assert:
    that:
      - cfg_display_skipped_hosts is defined
      - cfg_display_skipped_hosts | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_display_skipped_hosts' must be defined

      and must be a boolean variable
#
# Test if cfg_error_on_undefined_vars is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_error_on_undefined_vars has a correct value when it's defined
  assert:
    that:
      - cfg_error_on_undefined_vars | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_error_on_undefined_vars' must be a boolean variable
  when:
    - cfg_error_on_undefined_vars is defined
#
# Test if cfg_system_warnings is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_system_warnings has a correct value when it's defined
  assert:
    that:
      - cfg_system_warnings | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_system_warnings' must be a boolean variable
  when:
    - cfg_system_warnings is defined
#
# Test if cfg_deprecation_warnings is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_deprecation_warnings has a correct value when it's defined
  assert:
    that:
      - cfg_deprecation_warnings | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_deprecation_warnings' must be a boolean variable
  when:
    - cfg_deprecation_warnings is defined
#
# Test if cfg_command_warnings is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_command_warnings has a correct value when it's defined
  assert:
    that:
      - cfg_command_warnings | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_command_warnings' must be a boolean variable
  when:
    - cfg_command_warnings is defined
#
# Test if cfg_strategy is set correctly
#
- name: CHECK VAR | Checks if cfg_strategy is set correctly
  assert:
    that:
      - cfg_strategy is string
      - cfg_strategy in valid_strategy
    quiet: yes
    fail_msg: >
      The 'cfg_strategy' must be defined, must be

      a string and must contain one of:

      {{ valid_strategy | to_nice_yaml }}
  vars:
    - valid_strategy:
      - debug
      - free
      - host_pinned
      - linear
  when:
    cfg_strategy is defined
#
# Test if cfg_bin_ansible_callbacks is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_bin_ansible_callbacks has a correct value when it's defined
  assert:
    that:
      - cfg_bin_ansible_callbacks | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_bin_ansible_callbacks' must be a boolean variable
  when:
    - cfg_bin_ansible_callbacks is defined
#
# Test if cfg_nocolor is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_nocolor has a correct value when it's defined
  assert:
    that:
      - cfg_nocolor | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_nocolor' must be a boolean variable
  when:
    - cfg_nocolor is defined
#
# Test if cfg_fact_caching is set correctly
#
- name: CHECK VAR | Checks if cfg_fact_caching is set correctly
  assert:
    that:
      - cfg_fact_caching is string
      - cfg_fact_caching in valid_fact_caching
    quiet: yes
    fail_msg: >
      The 'cfg_fact_caching' must be a string

      and must contain one of:

      {{ valid_fact_caching | to_nice_yaml }}
  vars:
    - valid_fact_caching:
      - jsonfile
      - memcached
      - memory
      - mongodb
      - pickle
      - redis
      - yaml
  when:
    cfg_fact_caching is defined
#
# Test if cfg_fact_caching_prefix is set correctly
#
- name: CHECK VAR | Checks if cfg_fact_caching_prefix is set correctly
  assert:
    that:
      - cfg_fact_caching_prefix is string
    quiet: yes
    fail_msg: >
      The 'cfg_fact_caching_prefix' must be a string
  when:
    - cfg_fact_caching is defined
    - cfg_fact_caching_prefix | length > 0
#
# Test if cfg_fact_caching_timeout is set correctly
#
- name: CHECK VAR | Checks if cfg_fact_caching_timeout is set correctly
  assert:
    that:
      - cfg_fact_caching_timeout is number
      - cfg_fact_caching_timeout >= 0
    quiet: yes
    fail_msg: >
      The 'cfg_fact_caching_timeout' must be a number >= 0
  when:
    - cfg_fact_caching is defined
    - cfg_fact_caching_timeout is defined
#
# Test if cfg_fact_caching_path is set correctly
#
- name: CHECK VAR | Checks if cfg_fact_caching_path is set correctly
  assert:
    that:
      - cfg_fact_caching_path is defined
      - cfg_fact_caching_path is string
      - cfg_fact_caching_path | length > 0
    quiet: yes
    fail_msg: >
      The 'cfg_fact_caching_path' must be defined and

      must be a string
  vars:
    valid_fact_caching:
      - jsonfile
      - pickle
      - yaml
  when:
    - cfg_fact_caching is defined
    - cfg_fact_caching in valid_fact_caching
#
# Test if cfg_fact_caching_connect_uri is set correctly
#
- name: CHECK VAR | Checks if cfg_fact_caching_uri is set correctly
  assert:
    that:
      - cfg_fact_caching_connect_uri is defined
      - cfg_fact_caching_connect_uri | type_debug == 'list'
    quiet: yes
    fail_msg: >
      The 'cfg_fact_caching_connect_uri' must be defined and

      must be a list of connection information for the

      memcached DBs
  vars:
    valid_fact_caching:
      - memcached
  when:
    - cfg_fact_caching is defined
    - cfg_fact_caching in valid_fact_caching
#
# Test if cfg_fact_caching_connect_uri is set correctly
#
- name: CHECK VAR | Checks if cfg_fact_caching_uri is set correctly
  assert:
    that:
      - item is string
      - item | length > 0
    quiet: yes
    fail_msg: >
      The 'cfg_fact_caching_connect_uri' must be defined and

      must be a list of connection information for the

      memcached DBs. Example:

      - 127.0.0.1:11211

      - 10.10.10.10:11211
  vars:
    valid_fact_caching:
      - memcached
  loop: "{{ cfg_fact_caching_connect_uri | list }}"
  when:
    - cfg_fact_caching is defined
    - cfg_fact_caching in valid_fact_caching
    - cfg_fact_caching_connect_uri | type_debug == 'list'
#
# Test if cfg_fact_caching_connect_uri is set correctly
#
- name: CHECK VAR | Checks if cfg_fact_caching_path is set correctly
  assert:
    that:
      - cfg_fact_caching_connect_uri is defined
      - cfg_fact_caching_connect_uri is string
      - cfg_fact_caching_connect_uri | length > 0
    quiet: yes
    fail_msg: >
      The 'cfg_fact_caching_connect_uri' must be defined and

      must be a string
  vars:
    valid_fact_caching:
      - momgodb
      - redis
  when:
    - cfg_fact_caching is defined
    - cfg_fact_caching in valid_fact_caching
#
# Test if cfg_fact_caching_redis_keyset_name is set correctly
#
- name: CHECK VAR | Checks if cfg_fact_caching_redis_keyset_name is set correctly
  assert:
    that:
      - cfg_fact_caching_redis_keyset_name is string
      - cfg_fact_caching_redis_keyset_name | length > 0
    quiet: yes
    fail_msg: >
      The 'cfg_fact_caching_redis_keyset_name' must be a string
  vars:
    valid_fact_caching:
      - redis
  when:
    - cfg_fact_caching is defined
    - cfg_fact_caching in valid_fact_caching
    - cfg_fact_caching_redis_keyset_name is defined
#
# Test if cfg_fact_caching_redis_sentinel is set correctly
#
- name: CHECK VAR | Checks if cfg_fact_caching_redis_sentinel is set correctly
  assert:
    that:
      - cfg_fact_caching_redis_sentinel is string
      - cfg_fact_caching_redis_sentinel | length > 0
    quiet: yes
    fail_msg: >
      The 'cfg_fact_caching_redis_sentinel' must be a string
  vars:
    valid_fact_caching:
      - redis
  when:
    - cfg_fact_caching is defined
    - cfg_fact_caching in valid_fact_caching
    - cfg_fact_caching_redis_sentinel is defined
#
# TODO Asserts for memcached, mongodb and redis fact_caching
#
- name: INFO_MSG | TODO Asserts for memcached, mongodb and redis fact_caching configuration
  debug:
    msg: >
      TODO: Asserts for memcached, mongodb and redis fact_caching

      configuration
  vars:
    valid_fact_caching:
      - memcached
      - mongodb
      - redis
  when:
    - cfg_fact_caching is defined
    - cfg_fact_caching in valid_fact_caching
#
# Test if cfg_retry_files_enabled is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_retry_files_enabled has a correct value when it's defined
  assert:
    that:
      - cfg_retry_files_enabled | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_retry_files_enabled' must be a boolean variable
  when:
    - cfg_retry_files_enabled is defined
#
# Test if cfg_retry_files_save_path is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_retry_files_save_path has a correct value when it's defined
  assert:
    that:
      - cfg_retry_files_save_path is string
      - cfg_retry_files_save_path | length > 0
    quiet: yes
    fail_msg: >
      The variable 'cfg_retry_files_save_path' must be a string
  when:
    - cfg_retry_files_enabled is defined
    - cfg_retry_files_enabled
    - cfg_retry_files_save_path is defined
#
# Test if cfg_no_log is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_no_log has a correct value when it's defined
  assert:
    that:
      - cfg_no_log | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_no_log' must be a boolean variable
  when:
    - cfg_no_log is defined
#
# Test if cfg_no_target_syslog is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_no_target_syslog has a correct value when it's defined
  assert:
    that:
      - cfg_no_target_syslog | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_no_target_syslog' must be a boolean variable
  when:
    - cfg_no_target_syslog is defined
#
# Test if cfg_show_custom_stats is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_show_custom_stats has a correct value when it's defined
  assert:
    that:
      - cfg_show_custom_stats | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_show_custom_stats' must be a boolean variable
  when:
    - cfg_show_custom_stats is defined
#
# Test if cfg_inventory_ignore_extensions is set correctly
#
- name: CHECK VAR | Checks if cfg_inventory_ignore_extensions is set correctly
  assert:
    that:
      - cfg_inventory_ignore_extensions | type_debug == 'list'
    quiet: yes
    fail_msg: >
      The 'cfg_inventory_ignore_extensions' must be a list of

      file extenssions
  when:
    - cfg_inventory_ignore_extensions is defined
#
# Test if cfg_inventory_ignore_extensions is set correctly
#
- name: CHECK VAR | Checks if cfg_inventory_ignore_extensions is set correctly
  assert:
    that:
      - item is string
      - item | length >0
    quiet: yes
    fail_msg: >
      The 'cfg_inventory_ignore_extensions' must be a list of

      strings with the file extensions to be ignored.
  loop: "{{ cfg_inventory_ignore_extensions | list }}"
  when:
    - cfg_inventory_ignore_extensions is defined
    - cfg_inventory_ignore_extensions | length > 0
#
# Test if cfg_inventory_ignore_patterns is set correctly
#
- name: CHECK VAR | Checks if cfg_inventory_ignore_patterns is set correctly
  assert:
    that:
      - cfg_inventory_ignore_patterns | type_debug == 'list'
    quiet: yes
    fail_msg: >
      The 'cfg_inventory_ignore_patterns' must be a list of

      file patterns
  when:
    - cfg_inventory_ignore_patterns is defined
#
# Test if cfg_inventory_ignore_patterns is set correctly
#
- name: CHECK VAR | Checks if cfg_inventory_ignore_patterns is set correctly
  assert:
    that:
      - item is string
      - item | length >0
    quiet: yes
    fail_msg: >
      The 'cfg_inventory_ignore_patterns' must be a list of

      strings with the file patterns to be ignored.
  loop: "{{ cfg_inventory_ignore_patterns | list }}"
  when:
    - cfg_inventory_ignore_patterns is defined
    - cfg_inventory_ignore_patterns | length > 0
#
# Test if cfg_inventory_unparsed_is_failed is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_inventory_unparsed_is_failed has a correct value when it's defined
  assert:
    that:
      - cfg_inventory_unparsed_is_failed | type_debug == 'bool'
    quiet: yes
    fail_msg: >
      The variable 'cfg_inventory_unparsed_is_failed' must be a boolean variable
  when:
    - cfg_inventory_unparsed_is_failed is defined
#
# Test if cfg_roles_path is set correctly
#
- name: CHECK VAR | Checks if cfg_roles_path is set correctly
  assert:
    that:
      - cfg_roles_path is defined
      - cfg_roles_path | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_roles_path are set correctly
#
- name: CHECK VAR | Checks if items in cfg_roles_path are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_roles_path }}"
#
# Test if cfg_collections_paths is set correctly
#
- name: CHECK VAR | Checks if cfg_collections_paths is set correctly
  assert:
    that:
      - cfg_collections_paths is defined
      - cfg_collections_paths | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_collections_paths are set correctly
#
- name: CHECK VAR | Checks if items in cfg_collections_paths are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_collections_paths }}"
#
# Test if cfg_action_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_action_plugins is set correctly
  assert:
    that:
      - cfg_action_plugins is defined
      - cfg_action_plugins | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_action_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_action_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_action_plugins }}"
#
# Test if cfg_become_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_become_plugins is set correctly
  assert:
    that:
      - cfg_become_plugins is defined
      - cfg_become_plugins | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_become_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_become_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_become_plugins }}"
#
# Test if cfg_cache_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_cache_plugins is set correctly
  assert:
    that:
      - cfg_cache_plugins is defined
      - cfg_cache_plugins | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_cache_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_cache_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_cache_plugins }}"
#
# Test if cfg_callback_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_callback_plugins is set correctly
  assert:
    that:
      - cfg_callback_plugins is defined
      - cfg_callback_plugins | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_callback_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_callback_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_callback_plugins }}"
#
# Test if cfg_connection_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_connection_plugins is set correctly
  assert:
    that:
      - cfg_connection_plugins is defined
      - cfg_connection_plugins | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_connection_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_connection_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_connection_plugins }}"
#
# Test if cfg_lookup_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_lookup_plugins is set correctly
  assert:
    that:
      - cfg_lookup_plugins is defined
      - cfg_lookup_plugins | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_lookup_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_lookup_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_lookup_plugins }}"
#
# Test if cfg_inventory_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_inventory_plugins is set correctly
  assert:
    that:
      - cfg_inventory_plugins is defined
      - cfg_inventory_plugins | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_inventory_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_inventory_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_inventory_plugins }}"
#
# Test if cfg_vars_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_vars_plugins is set correctly
  assert:
    that:
      - cfg_vars_plugins is defined
      - cfg_vars_plugins | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_vars_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_vars_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_vars_plugins }}"
#
# Test if cfg_filter_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_filter_plugins is set correctly
  assert:
    that:
      - cfg_filter_plugins is defined
      - cfg_filter_plugins | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_filter_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_filter_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_filter_plugins }}"
#
# Test if cfg_test_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_test_plugins is set correctly
  assert:
    that:
      - cfg_test_plugins is defined
      - cfg_test_plugins | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_test_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_test_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_test_plugins }}"
#
# Test if cfg_terminal_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_terminal_plugins is set correctly
  assert:
    that:
      - cfg_terminal_plugins is defined
      - cfg_terminal_plugins | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_terminal_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_terminal_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_terminal_plugins }}"
#
# Test if cfg_strategy_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_strategy_plugins is set correctly
  assert:
    that:
      - cfg_strategy_plugins is defined
      - cfg_strategy_plugins | type_debug == 'list'
    quiet: yes
#
# Test if items in cfg_strategy_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_strategy_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item | length > 0
    quiet: yes
  loop: "{{ cfg_strategy_plugins }}"
