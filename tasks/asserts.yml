# file: roles/nodeansible/tasks/asserts.yml
# author: Antoni PÃ mies <toni@arboli.net>
#
---
#
# Test if ansible_base_packages is set correctly
#
- name: CHECK VAR | Checks if ansible_base_packages is set correctly
  assert:
    that:
      - ansible_base_packages is defined
      - ansible_base_packages is iterable
    quiet: yes

#
# Test if items in ansible_base_packages are set correctly
#
- name: CHECK VAR | Checks if items in ansible_base_packages are set correctly
  assert:
    that:
      - item is string
    quiet: yes
    fail_msg: >
      Item {{ item }} is not string
  loop: "{{ ansible_base_packages }}"

#
# Checks that cfg_hosts_inventory is a string
#
- name: CHECK VAR | Checks that cfg_hosts_inventory is a string
  assert:
    that:
      - cfg_hosts_inventory is defined
      - cfg_hosts_inventory is string
    quiet: yes
    fail_msg: "The variable 'cfg_hosts_inventory' must be defined and must be a string"

#
# Test if backup_config_files is defined and has a correct value
#
- name: CHECK VAR | Checks if backup_config_files is defined and has a correct value
  assert:
    that:
      - backup_config_files is defined
      - backup_config_files
          | type_debug == 'bool'
    quiet: yes
    fail_msg: "The variable 'backup_config_files' must be defined and must be a boolean variable"
#
# Test if cfg_library is set correctly
#
- name: CHECK VAR | Checks if cfg_library is set correctly
  assert:
    that:
      - cfg_library is defined
      - cfg_library is iterable
    quiet: yes
#
# Test if items in cfg_library are set correctly
#
- name: CHECK VAR | Checks if items in cfg_library are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_module_utils }}"
#
# Test if module_utils is set correctly
#
- name: CHECK VAR | Checks if cfg_module_utils is set correctly
  assert:
    that:
      - cfg_module_utils is defined
      - cfg_module_utils is iterable
    quiet: yes
#
# Test if items in cfg_module_utils are set correctly
#
- name: CHECK VAR | Checks if items in cfg_module_utils are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_module_utils }}"
#
# Checks that cfg_gathering is a string and has a correct value
#
- name: CHECK VAR | Checks that cfg_gathering is a string and has a correct value
  assert:
    that:
      - cfg_gathering is defined
      - cfg_gathering is string
      - cfg_gathering in valid_gathering
    quiet: yes
    fail_msg: >
      "The variable 'cfg_gathering' must be defined, must be a string and must contain one of:"

      {{ valid_gathering | to_nice_yaml }}
  vars:
    - valid_gathering:
      - smart
      - implicit
      - explicit
#
# Test if cfg_gather_subset is set correctly
#
- name: CHECK VAR | Checks if cfg_gather_subset is set correctly
  assert:
    that:
      - cfg_gather_subset is defined
      - cfg_gather_subset is iterable
    quiet: yes
#
# Test if items in cfg_gather_subset are set correctly
#
- name: CHECK VAR | Checks if items in cfg_gather_subset are set correctly
  assert:
    that:
      - item is defined
      - item is string
      - item in valid_gather_subset
    quiet: yes
    fail_msg: >
      "The items of 'cfg_gather_subset' must be defined, must be a string and must contain one of:"

      {{ valid_gather_subset | to_nice_yaml }}
  loop: "{{ cfg_gather_subset }}"
  vars:
    - valid_gather_subset:
      - all
      - network
      - hardware
      - virtual
      - facter
      - ohai
      - '!network'
      - '!hardware'
      - '!virtual'
      - '!facter'
      - '!ohai'
#
# Test if cfg_gather_timeout is set correctly
#
- name: CHECK VAR | Checks if cfg_gather_timeout is set correctly
  assert:
    that:
      - cfg_gather_timeout is defined
      - cfg_gather_timeout is number
    fail_msg: "The variable 'cfg_gather_timeout' must be defined and must be a number"
    quiet: yes
#
# Test if cfg_inject_facts_as_vars is defined and has a correct value
#
- name: CHECK VAR | Checks if cfg_inject_facts_as_vars is defined and has a correct value
  assert:
    that:
      - cfg_inject_facts_as_vars is defined
      - cfg_inject_facts_as_vars
          | type_debug == 'bool'
    quiet: yes
    fail_msg: "The variable 'cfg_inject_facts_as_vars' must be defined and must be a boolean variable"
#
# Test if cfg_stdout_callback are set correctly
#
- name: CHECK VAR | Checks if cfg_stdout_callback are set correctly
  assert:
    that:
      - cfg_stdout_callback is defined
      - cfg_stdout_callback is string
      - cfg_stdout_callback in valid_stdout_callback
    quiet: yes
    fail_msg: >
      "The variable 'cfg_stdout_callback' must be defined, must be a string and must contain one of:"

      {{ valid_stdout_callback | to_nice_yaml }}
  vars:
    - valid_stdout_callback:
      - default
      - yaml
      - debug
      - astomlog
#
# Test if cfg_roles_path is set correctly
#
- name: CHECK VAR | Checks if cfg_roles_path is set correctly
  assert:
    that:
      - cfg_roles_path is defined
      - cfg_roles_path is iterable
    quiet: yes
#
# Test if items in cfg_roles_path are set correctly
#
- name: CHECK VAR | Checks if items in cfg_roles_path are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_roles_path }}"
#
# Test if cfg_collections_paths is set correctly
#
- name: CHECK VAR | Checks if cfg_collections_paths is set correctly
  assert:
    that:
      - cfg_collections_paths is defined
      - cfg_collections_paths is iterable
    quiet: yes
#
# Test if items in cfg_collections_paths are set correctly
#
- name: CHECK VAR | Checks if items in cfg_collections_paths are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_collections_paths }}"
#
# Test if cfg_action_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_action_plugins is set correctly
  assert:
    that:
      - cfg_action_plugins is defined
      - cfg_action_plugins is iterable
    quiet: yes
#
# Test if items in cfg_action_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_action_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_action_plugins }}"
#
# Test if cfg_become_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_become_plugins is set correctly
  assert:
    that:
      - cfg_become_plugins is defined
      - cfg_become_plugins is iterable
    quiet: yes
#
# Test if items in cfg_become_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_become_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_become_plugins }}"
#
# Test if cfg_cache_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_cache_plugins is set correctly
  assert:
    that:
      - cfg_cache_plugins is defined
      - cfg_cache_plugins is iterable
    quiet: yes
#
# Test if items in cfg_cache_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_cache_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_cache_plugins }}"
#
# Test if cfg_callback_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_callback_plugins is set correctly
  assert:
    that:
      - cfg_callback_plugins is defined
      - cfg_callback_plugins is iterable
    quiet: yes
#
# Test if items in cfg_callback_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_callback_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_callback_plugins }}"
#
# Test if cfg_connection_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_connection_plugins is set correctly
  assert:
    that:
      - cfg_connection_plugins is defined
      - cfg_connection_plugins is iterable
    quiet: yes
#
# Test if items in cfg_connection_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_connection_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_connection_plugins }}"
#
# Test if cfg_lookup_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_lookup_plugins is set correctly
  assert:
    that:
      - cfg_lookup_plugins is defined
      - cfg_lookup_plugins is iterable
    quiet: yes
#
# Test if items in cfg_lookup_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_lookup_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_lookup_plugins }}"
#
# Test if cfg_inventory_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_inventory_plugins is set correctly
  assert:
    that:
      - cfg_inventory_plugins is defined
      - cfg_inventory_plugins is iterable
    quiet: yes
#
# Test if items in cfg_inventory_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_inventory_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_inventory_plugins }}"
#
# Test if cfg_vars_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_vars_plugins is set correctly
  assert:
    that:
      - cfg_vars_plugins is defined
      - cfg_vars_plugins is iterable
    quiet: yes
#
# Test if items in cfg_vars_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_vars_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_vars_plugins }}"
#
# Test if cfg_filter_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_filter_plugins is set correctly
  assert:
    that:
      - cfg_filter_plugins is defined
      - cfg_filter_plugins is iterable
    quiet: yes
#
# Test if items in cfg_filter_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_filter_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_filter_plugins }}"
#
# Test if cfg_test_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_test_plugins is set correctly
  assert:
    that:
      - cfg_test_plugins is defined
      - cfg_test_plugins is iterable
    quiet: yes
#
# Test if items in cfg_test_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_test_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_test_plugins }}"
#
# Test if cfg_terminal_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_terminal_plugins is set correctly
  assert:
    that:
      - cfg_terminal_plugins is defined
      - cfg_terminal_plugins is iterable
    quiet: yes
#
# Test if items in cfg_terminal_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_terminal_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_terminal_plugins }}"
#
# Test if cfg_strategy_plugins is set correctly
#
- name: CHECK VAR | Checks if cfg_strategy_plugins is set correctly
  assert:
    that:
      - cfg_strategy_plugins is defined
      - cfg_strategy_plugins is iterable
    quiet: yes
#
# Test if items in cfg_strategy_plugins are set correctly
#
- name: CHECK VAR | Checks if items in cfg_strategy_plugins are set correctly
  assert:
    that:
      - item is defined
      - item is string
    quiet: yes
  loop: "{{ cfg_strategy_plugins }}"
#
# Minimal Asserts for tonipamies.vim role
#
# Test if vim_for_sysadmins is defined and has a correct value
#
- name: CHECK VAR | Checks if vim_for_sysadmins is defined and has a correct value
  assert:
    that:
      - vim_for_sysadmins is defined
      - vim_for_sysadmins
          | type_debug == 'bool'
    quiet: yes
    fail_msg: "The variable 'vim_for_sysadmins' must be defined and must be a boolean variable"
#
# Checks that vim_color is a string
#
- name: CHECK VAR | Checks that vim_color is a string
  assert:
    that:
      - vim_color is defined
      - vim_color is string
    quiet: yes
    fail_msg: >
      "The variable 'vim_color' must be defined"
  when:
    - vim_for_sysadmins
#
# Checks that vim_airline_theme is a string
#
- name: CHECK VAR | Checks that vim_airline_theme is a string
  assert:
    that:
      - vim_airline_theme is defined
      - vim_airline_theme is string
    quiet: yes
    fail_msg: >
      "The variable 'vim_airline_theme' must be defined"
  when:
    - vim_for_sysadmins
#
# Test if vim_custom_pathogen_plugins is set correctly
#
- name: CHECK VAR | Checks if vim_custom_pathogen_plugins is set correctly
  assert:
    that:
      - vim_custom_pathogen_plugins is defined
      - vim_custom_pathogen_plugins is iterable
    quiet: yes
  when:
    - vim_for_sysadmins
    - vim_custom_pathogen_plugins is defined
#
# Test if items in vim_custom_pathogen_plugins are set correctly
#
- name: CHECK VAR | Checks if items in vim_custom_pathogen_plugins are set correctly
  assert:
    that:
      - item.name is defined
      - item.name is string
      - item.url is defined
      - item.url is string
      - item.enabled is defined
      - item.enabled
          | type_debug == 'bool'
    quiet: yes
  loop: "{{ vim_custom_pathogen_plugins }}"
  when:
    - vim_for_sysadmins
    - custom_pathogen_plugins is defined
#
# Test if vim_backup_config_files is defined and has a correct value
#
- name: CHECK VAR | Checks if vim_backup_config_files is defined and has a correct value
  assert:
    that:
      - vim_backup_config_files is defined
      - vim_backup_config_files
          | type_debug == 'bool'
    quiet: yes
    fail_msg: "The variable 'vim_backup_config_files' must be defined and must be a boolean variable"
  when:
    - vim_for_sysadmins
