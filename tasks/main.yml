# file: roles/nodeansible/tasks/main.yml
# author: Antoni PÃ mies <toni@arboli.net>
#
---
#
# Asserts
#
- name: INCLUDE_PREASSERTS | Includes Asserts for Ansible version and distribution version
  include: preasserts.yml
  tags:
    - always
#
# Includes distribution dependent variables
#
- name: INCLUDE_VARS | Includes distribution dependent variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_facts['distribution'] }}-{{ ansible_facts['distribution_major_version'] }}.yml"
        - "{{ ansible_facts['os_family'] }}-{{ ansible_facts['distribution_major_version'] }}.yml"
        - "{{ ansible_facts['distribution'] }}.yml"
        - "{{ ansible_facts['os_family'] }}.yml"
      paths:
        - roles/nodeansible/vars/
        - ../vars/
      skip: true
  tags:
    - always

#
# Asserts
#
- name: INCLUDE_ASSERTS | Include Asserts for Variables
  include: asserts.yml
  tags:
    - always
#
# Installs ansible base packages
#
- name: INSTALL_PKG | Installs Git and python Base Packages | WARNING! This task can take several minutes
  package:
    name: "{{ item }}"
    state: present
  loop: "{{ ansible_base_packages }}"
  tags:
    - always
#
# Upgrade pip to the last version
#
- name: INSTALL_PKG | Installs last version of pip package, force upgrade
  pip:
    name: pip
    state: latest  # noqa package-latest
  tags:
    - always
#
# Include Ansible Packages Asserts
#
- name: INCLUDE_ASSERTS | Include Packages Asserts
  include: pkgasserts.yml
  tags:
    - always
#
# Checks for the node ansible installed version
#
- name: CHECKING_INITIAL | Checks for the node ansible installed version
  assert:
    that:
      - remote_ansible_installed | bool
    fail_msg: >
      You are using TAG(s):

      {{ ansible_run_tags | default(['no-tags']) | to_nice_yaml }}

      but the node does not have ansible installed.

      Use the TAG: 'install' for do it.
    quiet: yes
  when:
    - ansible_run_tags is defined
    - "'all' not in ansible_run_tags"
  tags:
    - configure
    - install_roles
    - install_plugins

- name: CHECKING_INITIAL | Checks for the node ansible installed version
  assert:
    that:
      - remote_ansible_version is version('2.10', '>=')
    fail_msg: >
      You are using TAG(s):

      {{ ansible_run_tags | default(['no-tags']) | to_nice_yaml }}

      but the version of the ansible node that you have

      installed is {{ remote_ansible_version }} and you need at least teh version '2.10'

      Use the TAG: 'install' to install the new version.
    quiet: yes
  when:
    - ansible_run_tags is defined
    - "'all' not in ansible_run_tags"
    - remote_ansible_installed | bool
  tags:
    - configure
    - install_roles
    - install_plugins
#
# Remove old packages
#
- name: REMOVE_PKG | Remove old ansible packages
  package:
    name: ansible
    state: absent
  when:
    - remote_ansible_installed | bool
    - ansible_facts.packages['ansible'] is defined | bool
  tags:
    - install
#
# Remove old pip packages
#
- name: REMOVE_PKG | Remove old pip ansible packages | WARNING! This task can take several minutes
  pip:
    name: "{{ item.1 }}"
    state: absent
  loop: "{{ ansible_pip_packages|subelements('packages') }}"
  when:
    - remote_ansible_installed | bool
    - installed_via_pip is defined
    - installed_via_pip | bool
    - item.0.install is defined
    - item.0.install
    - item.0.name == 'ansible-base and ansible'
  tags:
    - install
#
# Installs ansible pip packages
#
- name: INSTALL_PKG | Installs pip ansible Packages | WARNING! This task can take several minutes
  pip:
    extra_args: "--no-cache-dir"
    name: "{{ item.1 }}"
    state: latest   # noqa package-latest
  loop: "{{ ansible_pip_packages|subelements('packages') }}"
  when:
    - item.0.install is defined
    - item.0.install
  tags:
    - install
#
# Ensures that user/groups exists or create when create_ansible_user is true
#
- name: CREATE_USER | Ensures that user/groups exists when create_ansible_user
  include: ansible_user.yml
  when:
    - create_ansible_user
  tags:
    - install
    - configure
#
# Ensures that /etc/ansible directory exists
#
- name: CREATE_DIR | Ensures /etc/ansible directory exists
  file:
    path: "/etc/ansible"
    state: directory
    recurse: no
    mode: 0755
    owner: root
    group: root
  tags:
    - install
    - configure

#
# Ensures that cfg_hosts_inventory directory exists
#
- name: "CREATE_DIR | Ensures that {{ cfg_hosts_inventory | dirname }} directory exists"
  file:
    path: "{{ cfg_hosts_inventory | dirname | default('/etc/ansible/') }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  when:
    - cfg_hosts_inventory | dirname | default('/etc/ansible/') != '/etc/ansible'
  tags:
    - install
    - configure

#
# Creates inventary host file
#
- name: TEMPLATE | Creates inventary host file
  template:
    src: etc/ansible/hosts
    dest: "{{ cfg_hosts_inventory | default('/etc/ansible/hosts') }}"
    mode: 0644
    backup: "{{ backup_config_files }}"
    owner: root
    group: root
  tags:
    - install
    - configure
#
# Ensures that all library directories exists
#
- name: "CREATE_DIR | Ensures that all library directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_library | default(['/usr/share/ansible/plugins/modules']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
#
# Ensures that module_utils directory exists
#
- name: "CREATE_DIR | Ensures that all module_utils directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_module_utils | default(['/usr/share/ansible/plugins/module_utils']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
#
# Ensures that cfg_roles_path directory exists
#
- name: "CREATE_DIR | Ensures that all roles_path directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_roles_path | default(['/etc/ansible/roles']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_roles
#
# Ensures that cfg_collections_paths directory exists
#
- name: "CREATE_DIR | Ensures that all collections_paths directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_collections_paths | default(['/etc/ansible/collections']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
#
# Ensures that all plugins directories exists
#
- name: "CREATE_DIR | Ensures that action plugins directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_action_plugins | default(['/usr/share/ansible/plugins/action']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_plugins

- name: "CREATE_DIR | Ensures that become plugins directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_become_plugins | default(['/usr/share/ansible/plugins/become']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_plugins

- name: "CREATE_DIR | Ensures that cache plugins directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_cache_plugins | default(['/usr/share/ansible/plugins/cache']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_plugins

- name: "CREATE_DIR | Ensures that callback plugins directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_callback_plugins | default(['/usr/share/ansible/plugins/callback']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_plugins

- name: "CREATE_DIR | Ensures that connection plugins directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_connection_plugins | default(['/usr/share/ansible/plugins/connection']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_plugins

- name: "CREATE_DIR | Ensures that lookup plugins directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_lookup_plugins | default(['/usr/share/ansible/plugins/lookup']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_plugins

- name: "CREATE_DIR | Ensures that inventory plugins directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_inventory_plugins | default(['/usr/share/ansible/plugins/inventory']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_plugins

- name: "CREATE_DIR | Ensures that vars plugins directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_vars_plugins | default(['/usr/share/ansible/plugins/vars']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_plugins

- name: "CREATE_DIR | Ensures that filter plugins directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_filter_plugins | default(['/usr/share/ansible/plugins/filter']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_plugins

- name: "CREATE_DIR | Ensures that test plugins directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_test_plugins | default(['/usr/share/ansible/plugins/test']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_plugins

- name: "CREATE_DIR | Ensures that terminal plugins directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_terminal_plugins | default(['/usr/share/ansible/plugins/terminal']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_plugins

- name: "CREATE_DIR | Ensures that strategy plugins directories exists"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  loop: "{{ cfg_strategy_plugins | default(['/usr/share/ansible/plugins/strategy']) }}"
  when:
    - item is not regex( '^(~).*' )
  tags:
    - install
    - configure
    - install_plugins
#
# Deploying ansible callback plugins from Git
#
- name: "CREATE_DIR | Ensures that temporal directory exists"
  file:
    path: "{{ git_tmp_dir | default('/tmp/git_tmp/') }}"
    state: directory
    recurse: yes
    mode: 0755
    owner: root
    group: root
  tags:
    - install
    - configure
    - install_plugins

- name: INSTALL_PLUGINS | Deploying ansible plugins from Git
  git:
    dest: "{{ git_tmp_dir | default('/tmp/git_tmp/') }}/{{ item.name }}"
    repo: "{{ item.source }}"
    clone: yes
    update: yes
    force: yes
    recursive: no
    version: "{{ item.version }}"
  loop: "{{ install_plugins }}"
  when:
    - install_plugins is defined
    - item.origen == "git"
  tags:
    - install
    - configure
    - install_plugins

- name: INSTALL_PLUGINS | Installs plugins to correct directory
  copy:
    src: "{{ git_tmp_dir | default('/tmp/git_tmp/') }}/{{ item.name }}/{{ item.file }}"
    dest: "{{ cfg_callback_plugins | first | default('/usr/share/ansible/plugins/callback') }}"
    remote_src: yes
    backup: no
    mode: '0644'
  loop: "{{ install_plugins }}"
  when:
    - install_plugins is defined
    - item.type == "callback"
    - item.origen == "git"
  tags:
    - install
    - configure
    - install_plugins

- name: REMOVE_TMP_DIR | Removes temporal directory
  file:
    state: absent
    path: "{{ git_tmp_dir | default('/tmp/git_tmp/') }}"
  tags:
    - install
    - configure
    - install_plugins
#
# Creates ansible.cfg file
#
- name: TEMPLATE | Creates ansible configuration file
  template:
    src: etc/ansible/ansible.cfg.j2
    dest: /etc/ansible/ansible.cfg
    mode: 0644
    backup: "{{ backup_config_files }}"
    owner: root
    group: root
  tags:
    - install
    - configure
#
# Deploying roles
#
- name: INSTALL_ROLES | Installs roles
  unarchive:
    src: "{{ item.source }}"
    dest: "{{ cfg_roles_path[0] }}"
    exclude:
      - ".[^/]*"
    extra_opts:
      - --transform
      - "s:^[^/]*:{{ item.name }}:"
    remote_src: yes
  loop: "{{ install_roles }}"
  when:
    - install_roles is defined
    - item.origen == "remote_compress"
    - cfg_roles_path[0] is defined
  tags:
    - install
    - install_roles
    - configure
#
# Deploying custom roles
#
- name: INSTALL_ROLES | Installs custom roles
  unarchive:
    src: "{{ item.source }}"
    dest: "{{ cfg_roles_path[0] }}"
    exclude:
      - ".[^/]*"
    extra_opts:
      - --transform
      - "s:^[^/]*:{{ item.name }}:"
    remote_src: yes
  loop: "{{ install_custom_roles }}"
  when:
    - install_custom_roles is defined
    - item.origen == "remote_compress"
    - cfg_roles_path[0] is defined
  tags:
    - install
    - install_roles
    - configure
